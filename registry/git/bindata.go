// Code generated by go-bindata.
// sources:
// registry/fixture/pgp_keys.asc
// DO NOT EDIT!

package git

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _registryFixturePgp_keysAsc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x97\xb7\x12\xb4\xe8\x62\x44\x73\x9e\xe2\x0f\xa5\xa2\xb4\x78\xb7\x55\x0a\x3e\x18\xbc\xf7\x30\x19\xde\x9b\xc1\x0c\x30\x4f\xaf\xda\x55\x7e\x3b\xec\x93\x76\xd0\xe7\x7f\xfe\x09\x2f\xca\xaa\xf5\xc7\x91\x9d\x3f\x4e\xc8\x1b\xaa\xf0\x47\x17\xd3\x3f\xbc\x61\x0b\xfa\xbf\x18\x12\x96\x69\xaa\xe6\xe3\xef\x3f\xed\x71\xac\xfb\xdf\x08\x32\x54\x4f\x9e\xed\xd5\x5f\xdd\x82\xe4\x63\x56\x0c\xc7\xb2\x42\x51\xb5\xed\xdd\x32\xff\xfd\x47\xff\x7f\xf8\x47\x5e\xfe\x60\x7f\xa1\x7f\x11\xd8\x9f\xff\x2a\xb3\xed\xea\xe6\xff\x86\xa0\x7b\x97\x2c\x5e\x9a\xd5\xd7\x76\xf1\x22\x78\xbd\x34\xbb\x68\x5c\xe3\xbd\x59\xeb\x66\xcd\x5a\xc7\x80\x1f\xa5\x51\x71\x3d\x14\x0b\xc0\x8d\xf6\x86\xb1\x6d\xca\x95\xe6\x4b\xfa\xe4\x65\xb6\xd2\xad\x42\x25\xfe\xee\xa2\x6d\x36\x78\x4e\xcc\xa6\x53\xe7\x3b\x30\x99\xf8\x73\xc5\x26\x71\xfb\x88\x4c\xe5\x7d\x7f\x05\x33\x61\x1d\xa4\x16\x80\x5a\xa3\x23\x57\xad\x7f\xc6\xbe\x28\x91\x74\x36\x9d\x04\x77\xd0\xed\x1a\x26\xa8\xf7\x03\x16\x69\xbb\x93\xe9\x19\x41\xbe\x3e\x75\x6b\x77\x96\x2a\x24\x19\xf2\x5f\x24\x7b\x1d\x54\xc8\x48\x98\xa0\x9b\x1a\xab\x26\xf6\xd7\x4d\x1a\xa2\x72\x3f\x30\xd9\x9b\xef\xac\x87\x30\x17\x61\x81\x47\x03\xdd\x52\x6d\xe7\xfd\x6d\xcc\x62\xd2\x97\xe7\xe0\x77\xba\xbc\xa3\x63\xd3\x43\x71\xa6\xb9\x58\x85\xfd\x86\x2a\x28\x6d\x53\x06\x07\xdf\x3f\x4d\x44\xd1\x0e\x2d\xe9\x3f\xc4\x84\x3c\x2d\xf7\x13\x71\xab\x3b\xd7\x1d\xa4\x68\x42\x57\x18\x4f\x86\x91\xda\x7c\xee\x78\x19\xb1\x86\x52\x83\xe9\x27\x18\x36\x2b\xac\xf2\x82\xd5\x60\x8e\x8c\x05\xf7\x5a\xeb\xfc\xcc\xef\xf5\xb4\x2a\x04\x5a\x17\xa5\x35\xdb\x29\x58\x8e\xe5\x25\xfa\x51\x3a\x21\x96\x71\x2d\x8c\x57\x45\xaf\xcf\xa5\x30\xc9\xf4\xbc\xcf\x1f\x3c\x8b\x69\xc5\x84\x56\xf4\x39\x5d\xe5\xa9\x57\xa6\x9c\x77\xcb\x4f\x0d\x74\xbc\x21\x03\xdf\xf8\xd5\x0e\x25\x7e\xf9\x69\xed\x8e\x8e\x86\xa6\x16\x4c\xfd\xe3\xa4\x99\x2b\x3e\x98\x50\xc9\x2e\x3f\x84\xea\x9c\xcd\x22\xda\xa8\x25\x46\xa9\x1f\x8e\xb8\xbf\x03\xa5\x30\x40\x8d\xb4\xdb\x87\xfc\x9a\x2a\x5b\x77\x7f\x7b\x13\x68\xed\x16\x14\xe6\xb2\xc9\xb0\x3a\x61\xc2\x36\xc6\x8c\x76\xcc\x8e\x5a\xbe\x87\x25\xf7\x4a\x98\x98\x75\x98\xbc\x12\xcd\x7d\x7a\xaf\x98\x6c\x25\x65\x8c\x87\x3f\xa0\x67\x20\xac\x53\x3c\x24\x15\x7f\x8c\xd7\xfb\x28\xb6\x41\xaf\x1b\x67\xd1\xa3\x4a\xc7\x8c\x83\x92\xe5\x6c\x4f\x10\xb6\xc4\x77\x7f\xc9\x40\xdd\x51\x1e\x6c\x8c\x12\xef\x36\x97\x95\x9a\x5b\xc7\x89\x10\x70\x72\xaf\x7d\x0a\xa9\x7a\xf9\x67\xba\x0e\x81\x00\xc8\xc2\xcd\x16\xe1\x15\x12\x49\xce\x44\x20\xeb\x07\xf6\xdb\x33\xaa\x16\xad\x73\x12\xb9\x8d\x33\x18\xb9\xde\x52\x3b\xee\x7c\x85\xd1\x8c\x22\xa8\x45\xee\x0f\xf9\x9a\x45\xb6\x27\x7e\xfe\x5a\x67\x24\x87\x7e\x0a\xa0\x7d\x08\x98\x0c\xb6\x43\x33\x7c\x24\x36\x62\x96\xe7\xcb\x7b\x41\x2a\x3c\x73\x98\x2b\x00\xdd\x38\x0f\xfd\x05\x3c\xe0\x02\x1e\xfa\xf9\x77\x97\xcb\x52\x9f\x11\xde\xb7\x10\x00\x9b\x4e\x77\x9b\xe2\x07\x9a\x13\x3c\x28\x13\x6b\x2c\x66\xf3\xcc\x27\xee\x79\x27\xfc\x5e\xf9\xd4\x9c\x25\xde\x52\xc6\xea\x99\xe2\xdc\xe1\xec\x06\x0f\x55\xc0\x0d\x80\xdb\x00\x03\x84\x42\x5c\x34\xf6\x17\x0c\xee\x80\x12\xfd\x76\x4b\x8e\xb0\xb2\x82\x7c\x99\x92\xe0\x91\x81\x0d\x80\x20\xbb\xa2\x28\x5c\x85\x06\xae\x30\x12\xc0\x22\x80\xcb\x8d\x21\x00\x44\x01\x00\xde\x19\x79\x00\x34\x93\xa6\x7a\xeb\xd9\x10\x01\x63\x3c\xd4\x5d\x82\x33\xb3\xf9\x56\x0a\x0f\xf7\x94\x84\xce\xf3\x0f\x69\x30\x7d\x78\xb5\xce\x2d\xd4\x0c\xab\x34\x5a\xb7\x91\x20\x49\xf6\x70\x71\xcf\xd5\x3c\x63\x97\xb8\x3f\x37\x21\x43\x9b\xe4\x15\xd3\xf1\x36\x1d\xdf\xb2\x66\x64\x25\x65\x67\x84\xf9\x70\xf8\x96\xca\xd8\xbe\xc2\xba\x75\xe8\x13\xe2\x02\x82\x68\x94\xc7\x5c\xa1\xeb\x0c\x02\x6e\xd3\x6a\x01\x04\xf1\x26\x7c\x7e\x8c\xb4\xee\x02\x73\x0d\xd6\xa3\xb6\xf1\x71\xab\x6a\xf9\x73\x50\xca\x13\x53\x3a\xf3\xb0\xf0\x4d\xe9\x1f\x2a\xb4\x33\xd9\x14\x28\x71\x90\xb2\x68\x82\x2a\x99\x91\xf1\xef\x9d\xbb\x9d\x87\x91\x63\xc5\x69\xb5\xad\x67\xcb\x7c\x5d\xbc\xf7\x7b\x95\x4d\xcd\x31\xd5\x20\xed\x8c\xba\x3c\xc5\x44\xbb\xca\x79\x86\x12\xe2\xad\xe1\x24\x6c\x2e\x1e\xd9\xa5\x02\x49\xe9\xeb\x6b\x33\xb8\x2e\x46\xaa\xd8\x8f\xef\x7b\x10\xb0\xbe\x61\x65\x5e\x37\x27\xe9\xab\x19\x88\x64\x68\x19\x19\x20\xd6\x5d\x51\x6a\xea\xe4\xd3\x86\xbb\xc9\x6c\xdf\x4c\x4e\x98\x20\x24\x4c\x07\x02\xb9\x6b\x1f\xd8\x95\x2a\x82\x44\x18\xb0\x2b\x84\xd9\x67\x13\x7b\xf2\xab\xca\x28\xfc\xe5\x15\xcc\xc6\x9b\x6c\xc5\x19\xa1\x98\x07\x72\x5b\xf8\x60\xc5\xec\xf1\xb6\xe1\x35\xfc\x14\x5e\xba\x1f\x33\xf4\xc9\xb4\xf6\xb2\x42\x4a\xb4\x5c\xd1\xa3\xaf\x02\xec\xd7\x9b\xcc\xaf\xb6\x61\x14\xe6\x5d\x69\x57\x41\xcb\xaa\x4a\x3c\xf5\x65\x69\x42\xb2\xc9\x28\xdf\x8b\xde\x2d\xc7\xab\xc1\xac\xf2\xce\xf7\x2e\x84\xbe\xcd\xd4\xff\xda\x12\x17\xa4\x98\x4f\x12\x92\x47\x4a\xc1\x2d\x8a\x58\x8e\x05\x79\x9a\xfe\x3e\x30\xff\xc5\x53\x45\x24\xfa\x77\x59\x56\xaf\x15\x3b\x1f\x1d\x9d\xae\xdf\x3b\xa5\x98\x76\x99\x8d\x2f\xa4\x7a\x76\x1d\x95\x9a\xba\xde\x4d\x1b\xab\xab\xea\x19\xee\x56\xdf\xc1\x00\x67\xb0\xf1\x58\xe5\xe8\x30\xe3\x01\xb3\xf6\xfc\x0d\x7c\x23\x95\x82\x59\x40\x73\x38\x56\x49\x83\xaf\xac\x84\xd7\xba\x05\x02\x41\x1c\x16\x2b\xc1\xed\x42\x06\x7b\x8d\xaa\x5c\x11\xe3\xb7\xdc\xba\x21\x15\xf8\x6e\x3e\x21\x02\x33\xb0\x78\x9d\x5c\x39\xc4\x25\x58\x46\x60\xf9\x7a\x42\xf4\xae\xb9\xdb\x1a\x76\x44\xc7\xf3\x20\x1f\xad\x46\x8e\x11\x9d\x55\x97\x5b\x07\x37\x45\x21\x93\xdd\xbb\xe3\xb7\xfa\x90\x15\xfd\x1d\x68\x54\xec\x00\xfc\x83\xa9\xa8\xdd\xfa\x2c\x5d\x57\x47\x3d\x3c\x2a\x83\xd8\x57\x88\x8a\xff\x4c\x1f\xfa\x02\xd1\x05\xf6\x58\x16\xb3\x4e\xff\x94\x3e\x59\xd7\x89\x17\xfb\xd7\xe6\xcf\x41\x72\x26\xf0\xa4\xc2\xcf\xf4\x89\xa7\x75\x52\xfa\x79\x19\x44\x07\x8e\x54\x32\x4c\xef\xbc\x7c\xad\x3b\x89\x7a\x29\xd4\x8c\x8a\x92\xee\xf3\xa8\x9e\x1c\x2f\x6b\x25\xfb\x72\x10\xdd\xce\x49\x63\x27\xc2\x6f\x05\xf6\xe3\x5e\x50\xc3\xa7\x49\xe7\xbd\xba\x95\x6b\xc8\x89\x0a\x57\x12\x1b\x3d\xb3\xf6\xe6\xa7\x33\xfc\xe4\x10\xda\xd6\x92\x1b\xe3\xcf\x59\x75\x16\x7b\x47\xca\xd3\x73\xcd\xa2\x53\x6a\xca\x5e\x24\x9d\x7f\x7d\xce\x4a\x14\xc2\xa7\x95\xc7\x6f\x26\x05\x73\xfb\xe1\x77\x4b\xc6\x90\x51\x53\x7b\xe4\x1f\xbf\x95\xa1\x8f\x70\x66\x44\x34\xb9\x9b\x71\x92\x69\x32\xaf\x85\xb8\xb7\xc4\x6a\xfd\x8c\xbe\xdb\xd6\x85\x1a\xf3\xa3\x4e\x8d\xeb\x81\xb5\xea\x18\x3d\xc1\xf6\x7c\x02\x5f\x9b\x57\x9e\xb3\x6c\x7e\x80\xb3\xcb\xa0\x39\x5c\x0d\xc6\xca\x5d\x9e\xbf\x48\xa7\x30\x13\x36\x75\x76\x90\x52\x74\x8c\x48\x19\xe5\xff\x5e\x4d\x6e\x1f\x5a\xbc\xa0\xb4\x0f\xfb\x9d\xbf\x4b\x76\xff\x5b\x53\xf6\x9a\x5d\x6e\x2a\x64\x34\x4a\xa1\x67\x2d\x95\xd5\x28\x8f\x08\xac\x88\xcc\x69\x04\x6d\x0e\xef\x7c\x25\x97\x82\xee\x4f\x05\x0f\x6c\x83\xc1\x97\xa8\x33\xc6\x42\xe1\x13\x27\xea\x57\x44\x9a\xb9\x86\x08\x34\x58\xdf\x52\x5b\xb7\x13\xe8\x8d\xdf\x6b\xb7\x17\x32\x22\x3f\x4b\x3e\x23\x1c\x13\x04\xd4\xc8\xaa\x87\x20\x2d\xfc\x08\x74\xac\x73\xec\x60\xfe\x2d\xf5\x56\x6e\xfe\xb6\x93\xb1\xd1\x84\x01\x39\xc5\xfe\x44\x0e\x34\xfc\xbb\x67\xc8\x0d\x12\xb4\x53\xa5\xd6\x4a\x46\x5e\x16\xa5\x32\x23\x01\xfd\x5a\x5f\xd7\x66\xbe\x68\x72\xbe\xec\x11\x26\x61\x83\xad\xf9\xb7\xb6\x8d\x6d\xbc\x8f\xbd\xa1\xc1\x0c\xaf\xde\x4d\x97\x79\xba\x4f\x94\x90\x49\x5d\x8d\xfa\xb8\x18\x86\xdf\x6f\x71\x77\x3a\xe5\x73\x2a\xef\xa4\xa9\x4b\xff\xd4\x0d\xc6\x09\x49\x38\xc3\x51\x93\x4f\x7b\xbb\xc6\x08\xae\xf6\xf9\x83\xc2\x56\x36\x5a\xf0\xc8\x45\x6b\xd9\x0d\x20\x5d\xa2\xd4\xf7\xe4\x6c\x37\xdb\xff\x36\x78\x2d\xbf\xae\x76\x20\x68\x28\x09\x88\x78\x3f\x0a\x8e\xac\x07\xdb\x1b\xd1\x35\x99\x17\x5b\x8e\xc9\x00\xb7\x43\xcb\x58\x48\xce\x9e\x7a\x90\x62\x2b\x86\x41\xca\x43\x3e\x06\xe1\xd0\x64\xb3\x82\x35\xc7\x16\x65\x91\xea\x22\x19\xc3\x37\x29\x0d\xcc\x30\x34\x7e\x88\xc5\x95\xbf\x39\xb2\x96\x24\xb2\x32\xdd\x80\x17\x79\x00\x14\xe1\x4a\x42\x51\x06\xa2\x0a\x01\x61\x90\xc0\xf8\xef\xc5\xd1\x44\xcd\xb2\x48\x9a\xf5\x82\xeb\x53\x83\x76\x37\x79\x77\xa8\xc4\x5f\x03\x78\xb0\x2b\x82\x6b\x4a\x92\xdb\xe8\xa0\x31\x45\xe9\x9f\xaa\x01\xe0\xa8\x1a\x17\x02\x3a\x45\x30\x2a\x21\x6c\xde\xea\xce\x4d\x40\x77\x31\x2d\xac\xc7\xae\x51\x6b\x9e\xaf\xf2\xf7\xb0\xd2\xa1\x57\xab\x46\x2a\x5e\x28\x4c\x0d\x9f\x6e\x7d\xe5\x59\xa2\x5e\xdb\xfc\x15\x15\xcc\x19\x30\xa8\xec\xae\x9c\x7f\x7e\x84\x73\xcd\x3c\xcc\x60\xde\xcf\xff\x6a\xe6\xe7\xb1\x4c\xfb\xf1\x14\x2d\x4c\x85\xf3\x78\xef\xf0\xcc\x9e\xd2\x88\x2b\x85\x18\xab\x91\x53\xde\x31\x75\x91\x3e\x42\xb7\x1a\x57\x41\x95\xe8\x37\x6b\xf1\x33\x68\xa3\xf6\xce\x80\x70\x6d\xc1\xcf\xe6\xae\x3c\x60\x39\xfd\x1e\xe2\x4f\x28\xb4\x3d\x80\xaf\xa0\xf1\xa4\xf1\xf1\x33\x34\xb6\x8e\x5f\x46\xcf\xc3\x8e\x0b\x3f\x41\xe3\x8c\x02\x2a\x47\xaa\x6e\xdb\x83\x87\xdf\xf8\x1d\x73\x14\xe9\x10\x5e\xe4\x80\xde\x9f\xc5\x26\x69\x38\xe5\xb4\x51\xa1\xf9\x06\x56\xbf\xda\x6d\x4b\xd5\xef\xda\x08\x56\x96\x69\xe6\xa0\xfa\x30\x55\x97\xfd\x28\xc8\xb4\x15\x3f\x90\xe8\x69\x8e\x32\x72\x49\x63\x9c\x63\x9e\x01\xa1\x9d\x6a\x69\xb0\x02\xb1\x79\x4e\x7a\x24\xe5\x49\x4f\x7b\x5b\x23\x1b\x47\xce\x9e\xe3\x5f\xb4\xc1\x48\x43\x59\x11\x4e\xac\x15\x25\x24\xea\x00\x2b\x11\x75\x5b\xd7\xda\x72\x44\x14\x59\xcc\xed\x27\xb8\x8f\xc1\xa9\x69\xc2\x46\xd8\xd0\xe5\x23\x65\x92\xb2\xde\x4b\x6e\x94\x5d\x9c\x71\x5d\x6f\x6d\x42\x2e\xfb\x54\x76\xa6\x64\xa5\x04\x22\xa7\x5c\x14\x55\x0f\x26\x74\x50\x4f\xcb\xf8\x58\x2c\xed\xa3\xbf\x80\x4e\xf4\x21\x08\xed\x4f\x38\x4c\x3f\x16\x3e\xae\x22\xf2\x95\x37\x8c\x9d\x40\x62\xa4\x26\x7a\x3e\x75\x0d\xfb\xef\xfa\xa9\x0b\xa8\x1e\xb1\xd7\xf7\xc1\xde\xc6\x99\x00\xa4\x9b\x6e\xae\x22\x3f\xe3\x0f\xee\x22\xc4\x7c\x56\xff\x42\xb5\x79\xa4\xa3\xdd\x8b\x16\x76\x13\x31\x4d\xa9\x86\x99\x5d\xf1\xb5\x30\x89\x37\xff\xf5\xdd\xaf\x01\x7d\xcf\x8b\x91\x7e\xe4\x45\x73\xec\xeb\x12\xc3\x70\x67\x5e\x24\x02\x72\xc1\xf3\x8f\xed\xa8\xba\x4f\x9b\x14\x75\xd8\xd4\x79\xb0\x7c\xe7\x25\x9f\x46\x7e\xcb\x60\xf7\x71\x0a\xad\xad\xe3\x70\xe8\x4b\xa8\xcf\xca\x51\xb4\xe7\x89\xbe\xc4\xed\x85\xdc\xc2\x2b\xb9\xcf\xe6\xb5\xc3\xab\x8e\x8e\x68\xb2\x1d\x7a\x42\xf6\x28\x6b\xa2\x2d\x1e\x46\x0f\x56\x7c\xfa\x65\x42\x7e\x36\x5f\x69\xd1\xd9\x92\x56\x04\x43\x78\x7a\x94\x0e\x41\x76\xcf\x02\x93\xa9\x3a\x69\xc4\xf4\x23\xb5\xfc\x33\xb0\xb9\x19\x3b\xc1\x15\x22\xd1\x73\x18\xc5\xe8\xb8\xa1\x4e\x43\xff\x8b\x9e\x3d\x03\xfd\x2b\x0c\xa2\xf5\xfa\x0f\x36\xf1\x7f\x01\x00\x00\xff\xff\xfe\x7a\x61\x2a\x73\x0c\x00\x00")

func registryFixturePgp_keysAscBytes() ([]byte, error) {
	return bindataRead(
		_registryFixturePgp_keysAsc,
		"registry/fixture/pgp_keys.asc",
	)
}

func registryFixturePgp_keysAsc() (*asset, error) {
	bytes, err := registryFixturePgp_keysAscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registry/fixture/pgp_keys.asc", size: 3187, mode: os.FileMode(420), modTime: time.Unix(1506289325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"registry/fixture/pgp_keys.asc": registryFixturePgp_keysAsc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"registry": &bintree{nil, map[string]*bintree{
		"fixture": &bintree{nil, map[string]*bintree{
			"pgp_keys.asc": &bintree{registryFixturePgp_keysAsc, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

